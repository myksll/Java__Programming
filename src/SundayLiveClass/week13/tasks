Practice Tasks

	------------------------------------------------------------------------

Exercise [abstract class]

	create an abstract class Exercise
	create abstract methods: perform() & getCaloriesBurned(int minutes)

	create a class Running
	inherit the Exercise class and implement the abstract methods
		for calories method return minutes * 15

	create an abstract class Lifting
	inherit the Exercise class
	create abstract method: rackWeight()

	create a class Bench
	inherit the Lifting class and implement the abstract methods
		for calories method return minutes * 5

	create a class Gym to test the objects and methods

	------------------------------------------------------------------------

Language [interface, polymorphism, method]

	create an interface Language
	create a constant variable: DEFAULT_ENCODING = "UTF-8";
	create abstract methods: hello() & bye()
	create a static method: description()
		print a message about languages: "Languages have the ability to express thoughts and ideas to others using units of sound like words or sentences. There is often rules or syntax for how the words come together"

	create a default method translate(Language l, String msg)
		return: void
		parameters: Language
		use this code: System.out.println("Translating " +  msg + " in " + getClass().getSimpleName() + " into " + l.getClass().getSimpleName());

	create a class English and implement Language
	create a class Spanish and implement Language
	add as many languages as you want
	test the description and translates methods

	------------------------------------------------------------------------

Clothes [abstraction, polymorphism, ArrayList]

	create an abstract class Clothes
	create an abstract method wear()

	create a class TShirt
	inherits the Clothes class
	implement the wear() method

	create an interface HasHood
	create an abstract method putOnHood()

	create a class Jacket
	inherits the Clothes class
	implements the HasHood interface
	implement the wear() & putOnHood() methods

	Extra: Create a extra classes: hat, coat, sock, hoodie

	create a class Store
	create a main method and create TShirt and Jacket objects
	create an ArrayList of Clothes. Add the different objects
	iterate through the ArrayList and call the wear() method

	------------------------------------------------------------------------

Building Part 1 [abstraction]

	- Create an abstract class Building

		create instance variables:
			String location
			double price

		create abstract methods:
			void pay()

		create a constructor to assign the location & price

		override the toString to print the location & price

	- Create an interface HasElevator
		abstract method:
			void elevator(int floor)

	- Create an interface HasBalcony
		abstract method:
			void openBalcony()

	- Create an interface HasBackyard
		abstract method:
			void mowLawn()

	- Create an class House
		child class of Building
		implements HasBackyard

		create instance variable
			int number of residents

		create a constructor to assign the location, price, and number of residents

		implement all abstract methods (give some print statements. Ex: Paying for House, or Going into Backyard)

		override the toString to print the location, price, and number of residents

	- Create an class Apartment
		child class of Building
		implements HasBalcony

		create instance variable
			int months of lease

		create a constructor to assign the location, price, and months of lease

		implement all abstract methods (give some print statements)

		override the toString to print the location, price, and months of lease

	- Create an class OfficeBuilding
		child class of Building
		implements HasElevator

		create instance variable
			int number of floors

		create a constructor to assign the location, price, and number of floors

		implement all abstract methods (give some print statements)

		override the toString to print the location, price, and number of floors

	------------------------------------------------------------------------

Building Part 2 [polymorphism, method, ArrayList]

	- create a class BuildingUtil

		create a static method Rent(Building obj)
			return: double
			parameters: Building type

			implementation:
				if the Building is House type
					return price / 360 * 2

				if the Building is Apartment type
					return price / 600

				if the Building is OfficeBuilding type
					return price / 1000

		create a static method search(String location)
			return: Building
			parameters: String location

			implementation
				if the location is Great Falls return a House object with:
					location: Great Falls
					price: 500_000
					number of residents: 4

				if the location is FairFax return a Apartment object with:
					location: FairFax
					price: 750_000
					month for lease: 6

				if the location is McLean return a OfficeBuilding object with:
					location: McLean
					price: 3_000_000
					number of floors: 6

	- create a class RealEstate
		create a main method

		create an ArrayList of Building
			-> this can hold objects of House, Apartment, & OfficeBuilding

		create a bunch of House, Apartment, & OfficeBuilding objects and store them into the ArrayList

		mini tasks:

			- Search for a Building in a specific location
			- Iterate through and show the rent of all the buildings
			- Find the most expensive Building, print all its information
			- Find the least expensive Building, print all its information
			- Filter all the Buildings in one location(ex search for buildings in Chicago)
			- Filter all the Buildings within a certain price range

	------------------------------------------------------------------------